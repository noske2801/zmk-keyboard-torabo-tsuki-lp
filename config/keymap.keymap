#include <dt-bindings/zmk/modifiers.h>
#include <layout_shift.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>

#define DEFAULT 0
#define SYMBOLS 1
#define NUMPAD 2
#define EXTRA 3
#define SYSTEM 4
#define MOUSE 5
#define SCROLL 6

/* オートマウスレイヤーの設定 */

&mkp_input_listener {
    input-processors = <&zip_temp_layer MOUSE 10000>; /* (AMLを適用するレイヤー, レイヤーが解除されるまでの時間(ms)) */
};

&zip_temp_layer {
    require-prior-idle-ms = <200>; /* キー入力から指定の時間(ms)、AMLを有効にしない(誤爆防止) */
    excluded-positions = <
 /* ここで指定しないキー(非マウスキー)を押したとき、AMLを解除 */
        33 // J
        34 // K
        35 // L
        39 // Z(Ctrl)
        40 // X(Shift)
        41 // C(Alt)
        42 // V(Space)
        47 // M
        48 // ,
        49 // .
    >;
};

/* Mod-Tap */

&mt {
    tapping-term-ms = <200>;
    quick-tap-ms = <250>;
    flavor = "balanced";
};

/* Layer-Tap */

&lt {
    tapping-term-ms = <200>;
    quick-tap-ms = <250>;
    flavor = "balanced";
};

/ {
    combos {
        compatible = "zmk,combos";

        mkp_MB4 {
            bindings = <&mkp MB4>;
            key-positions = <32 33>;
            layers = <0 5 6>;
        };

        mkp_MB5 {
            bindings = <&mkp MB5>;
            key-positions = <36 35>;
            layers = <0 5 6>;
        };

        kp_ESC {
            bindings = <&kp ESCAPE>;
            key-positions = <14 13>;
            layers = <0 5>;
        };

        CTRL_W {
            bindings = <&kp LC(W)>;
            key-positions = <32 36>;
            layers = <0 2 5>;
        };
    };

    macros {
        /omit-if-no-ref/

        /* AMLを解除するマクロ */

        exit_AML: exit_AML {
            compatible = "zmk,behavior-macro";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <0>;
            bindings = <&tog_off 7>;
        };

        /omit-if-no-ref/

        /* KeyPress後にAMLを解除するマクロ */

        kp_exit_AML: kp_exit_AML {
            compatible = "zmk,behavior-macro-one-param";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <1>;
            bindings = <&macro_param_1to1 &kp MACRO_PLACEHOLDER &exit_AML>;
        };

        sc_chrome_translate: sc_chrome_translate {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(F10) &kp T>;
            label = "SC_CHROME_TRANSLATE";
        };
    };

    behaviors {
        /omit-if-no-ref/

        /* レイヤーを無効化するbehavior */

        tog_off: toggle_layer_off {
            compatible = "zmk,behavior-toggle-layer";
            #binding-cells = <1>;
            display-name = "Toggle Layer Off";
            toggle-mode = "off";
        };

        /omit-if-no-ref/

        /* ホールド時はkp、タップ時はkp_exit_AMLを使うhold-tap (修飾キーではmtの代わりにこれを使用)*/

        mt_exit_AML_on_tap: mt_exit_AML_on_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "MT_exit_AML_ON_TAP";
            bindings = <&kp>, <&kp_exit_AML>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
            quick-tap-ms = <200>;
        };

        /* Shiftキーを無効にしてIME_ONにする */

        mm_IME_ON: mo_IME_ON {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LANGUAGE_1>, <&kp LANGUAGE_1>;

            mods = <(MOD_LSFT | MOD_RSFT)>;
            keep-mods = <0>; /* 明示的にShiftキーを無効化 */
        };

        /* <Shift + ,>で<!>を入力 */

        mm_COMMA_EXCLAMATION: mm_COMMA_EXCLAMATION {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp EXCLAMATION>;

            mods = <(MOD_LSFT | MOD_RSFT)>;
        };

        /* <Shift + .>で<?>を入力 */

        mm_PERIOD_QUESTION: mm_PERIOD_QUESTION {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp PERIOD>, <&kp QUESTION>;

            mods = <(MOD_LSFT | MOD_RSFT)>;
        };

        /* &kp の定義を上書き zmk-layout-shift/dts/layout_shift_kp_override.dtsi */
        // Keep the original key_press behavior for ZMK core components

        original_key_press: original_key_press {
            compatible = "zmk,behavior-key-press";
            #binding-cells = <1>;
            label = "KEY_PRESS";
        };

        // Override the existing &kp behavior to use our custom implementation

        kp: key_press {
            compatible = "zmk,behavior-layout-shift-key-press";
            #binding-cells = <1>;
            label = "LAYOUT_SHIFT_KEY_PRESS";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        DEFAULT {
            bindings = <
&none  &none                               &none                             &none                           &none             &none                                           &none        &none  &none               &none                  &none                  &none
&none  &kp Q                               &kp W                             &kp E                           &kp R             &kp T                                           &kp Y        &kp U  &kp I               &kp O                  &kp P                  &none
&none  &kp A                               &kp S                             &kp D                           &kp F             &kp G                 &none      &none          &kp H        &kp J  &kp K               &kp L                  &kp MINUS              &none
&none  &mt_exit_AML_on_tap LEFT_CONTROL Z  &mt_exit_AML_on_tap LEFT_SHIFT X  &mt_exit_AML_on_tap LEFT_ALT C  &kp_exit_AML V    &kp B                 &kp TAB    &mo 1          &kp N        &kp M  &mt LEFT_ALT COMMA  &mt LEFT_SHIFT PERIOD  &mt LEFT_CONTROL FSLH  &none
&none  &kp LANGUAGE_2                      &kp LGUI                          &kp LALT                        &lt 1 LANGUAGE_2  &mt LEFT_SHIFT SPACE  &lt 3 TAB  &kp BACKSPACE  &lt 2 ENTER  &none  &none               &kp LEFT_GUI           &mm_IME_ON             &none
            >;
        };

        SYMBOLS {
            bindings = <
&trans  &trans            &trans                                &trans                                   &trans                                 &trans                                 &trans                &trans        &trans           &trans            &trans         &trans
&trans  &kp SINGLE_QUOTE  &kp DQT                               &kp LPAR                                 &kp RPAR                               &kp NON_US_BACKSLASH                   &kp NON_US_BACKSLASH  &kp AT        &kp LESS_THAN    &kp GREATER_THAN  &kp PERCENT    &trans
&trans  &kp AMPERSAND     &kp SQT                               &kp LEFT_BRACKET                         &kp RIGHT_BRACKET                      &kp PIPE              &trans  &trans   &kp PIPE              &kp HASH      &kp SEMICOLON    &kp COLON         &kp UNDER      &trans
&trans  &kp LEFT_CONTROL  &mt_exit_AML_on_tap LEFT_SHIFT GRAVE  &mt_exit_AML_on_tap LEFT_ALT LEFT_BRACE  &mt_exit_AML_on_tap SPACE RIGHT_BRACE  &kp DOLLAR            &trans  &trans   &kp DOLLAR            &kp ASTERISK  &kp EXCLAMATION  &kp QUESTION      &kp BACKSLASH  &trans
&trans  &trans            &trans                                &trans                                   &trans                                 &trans                &trans  &kp DEL  &trans                &trans        &trans           &trans            &trans         &trans
            >;
        };

        NUMPAD {
            bindings = <
&trans  &trans                                        &trans                                      &trans                                    &trans                    &trans                        &trans    &trans          &trans          &trans           &trans         &trans
&trans  &trans                                        &kp KP_NUMBER_7                             &kp KP_NUMBER_8                           &kp KP_NUMBER_9           &kp CARET                     &kp F5    &kp PAGE_UP     &kp UP_ARROW    &kp PAGE_DOWN    &kp F11        &trans
&trans  &kp KP_NUMBER_0                               &kp KP_NUMBER_4                             &kp KP_NUMBER_5                           &kp KP_NUMBER_6           &kp KP_EQUAL  &trans  &trans  &kp HOME  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &kp END        &trans
&trans  &mt_exit_AML_on_tap LEFT_CONTROL KP_NUMBER_0  &mt_exit_AML_on_tap LEFT_SHIFT KP_NUMBER_1  &mt_exit_AML_on_tap LEFT_ALT KP_NUMBER_2  &kp_exit_AML KP_NUMBER_3  &kp TILDE     &trans  &trans  &trans    &kp KP_PLUS     &kp KP_COMMA    &kp KP_DOT       &kp KP_DIVIDE  &trans
&trans  &trans                                        &trans                                      &trans                                    &trans                    &trans        &trans  &trans  &trans    &trans          &trans          &trans           &trans         &trans
            >;
        };

        EXTRA {
            bindings = <
&trans  &trans  &trans           &trans           &trans           &trans                   &trans                &trans                &trans          &trans           &trans         &trans
&trans  &trans  &kp F7           &kp F8           &kp F9           &kp F12                  &kp LS(LC(NUMBER_1))  &kp LC(LS(NUMBER_2))  &kp LC(N0)      &kp LS(LG(S))    &trans         &trans
&trans  &trans  &kp F4           &kp F5           &kp F6           &kp F11  &trans  &trans  &sc_chrome_translate  &kp C_VOLUME_DOWN     &mmv MOVE_UP    &kp C_VOLUME_UP  &kp LC(LG(T))  &trans
&trans  &trans  &kp_exit_AML F1  &kp_exit_AML F2  &kp_exit_AML F3  &kp F10  &trans  &trans  &trans                &mmv MOVE_LEFT        &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &trans         &trans
&trans  &trans  &trans           &trans           &trans           &trans   &trans  &mo 4   &trans                &trans                &trans          &trans           &trans         &trans
            >;
        };

        SYSTEM {
            bindings = <
&trans  &trans        &trans        &trans        &trans        &trans                                  &trans  &trans  &trans  &trans  &trans   &trans
&trans  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4                            &trans  &trans  &trans  &trans  &trans   &trans
&trans  &trans        &trans        &trans        &trans        &trans        &trans      &trans        &trans  &trans  &trans  &trans  &tog_ls  &trans
&trans  &trans        &trans        &trans        &trans        &trans        &bt BT_CLR  &out OUT_TOG  &trans  &trans  &trans  &trans  &trans   &trans
&trans  &trans        &trans        &trans        &trans        &trans        &trans      &trans        &trans  &trans  &trans  &trans  &trans   &trans
            >;
        };

        MOUSE {
            bindings = <
&trans  &trans            &trans          &trans        &trans     &trans                  &trans  &trans     &trans     &trans     &trans  &trans
&trans  &trans            &trans          &trans        &trans     &trans                  &trans  &trans     &trans     &trans     &trans  &trans
&trans  &trans            &trans          &trans        &trans     &trans  &trans  &trans  &trans  &mkp LCLK  &mkp MCLK  &mkp RCLK  &trans  &trans
&trans  &kp LEFT_CONTROL  &kp LEFT_SHIFT  &kp LEFT_ALT  &kp SPACE  &trans  &trans  &trans  &trans  &trans     &mo 6      &trans     &trans  &trans
&trans  &trans            &trans          &trans        &trans     &trans  &trans  &trans  &trans  &trans     &trans     &trans     &trans  &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };
    };
};

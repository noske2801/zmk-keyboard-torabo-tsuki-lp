#include <dt-bindings/zmk/modifiers.h>
#include <layout_shift.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>

#define DEFAULT 0
#define SYMBOLS 1
#define NUMPAD 2
#define EXTRA 3
#define SYSTEM 4
#define MOUSE 5
#define SCROLL 6
#define KEYS_L 13 14 15 16 17 25 26 27 28 29 39 40 41 42 43 44 53 54 55
#define KEYS_L_CSASP 26 27 28 29 40 41 42 43
#define KEYS_R 18 19 20 21 22 32 33 34 35 36 45 46 47 48 49 50 62 63 64
#define THUMBS 56 57 58 59 60 61

// オートマウスレイヤーの設定

&mkp_input_listener {
    input-processors = <&zip_temp_layer MOUSE 10000>; // マウスボタンを押した後、指定の時間(ms)AMLを延長
};

&zip_temp_layer {
    require-prior-idle-ms = <200>; // キー入力から指定の時間(ms)、AMLを有効にしない(誤爆防止)
    excluded-positions = <
  /* ここで指定しないキー(非マウスキー)を押したとき、AMLを解除 */
        15 // E(SCROLL)
        20 // I(SCROLL)

        25 // A(GUI)
        26 // S(Ctrl)
        27 // D(Shift)
        28 // F(Alt)

        33 // J(LMB)
        34 // K(MMB)
        35 // L(RMB)

        57 // SandS
    >;
};

// Mod-Tap

&mt {
    tapping-term-ms = <200>;
    quick-tap-ms = <250>;
    flavor = "balanced";
};

// Layer-Tap

&lt {
    tapping-term-ms = <200>;
    quick-tap-ms = <250>;
    flavor = "hold-preferred";
};

/ {
    combos {
        compatible = "zmk,combos";

        mkp_MB4 {
            bindings = <&mkp MB4>;
            key-positions = <32 33>;
            layers = <0 5 6>;
        };

        mkp_MB5 {
            bindings = <&mkp MB5>;
            key-positions = <36 35>;
            layers = <0 5 6>;
        };

        kp_ESC {
            bindings = <&kp ESCAPE>;
            key-positions = <14 13>;
            layers = <0 5>;
        };

        kp_CTRL_W {
            bindings = <&kp LC(W)>;
            key-positions = <32 36>;
            layers = <0 2 5>;
        };

        kp_CTRL_SHIFT_T {
            bindings = <&kp LS(LC(T))>;
            key-positions = <18 22>;
        };

        kp_Win_1 {
            bindings = <&kp LG(N1)>;
            key-positions = <43 46>;
        };

        kp_Win_2 {
            bindings = <&kp LG(N2)>;
            key-positions = <16 22>;
        };

        kp_TAB {
            bindings = <&kp TAB>;
            key-positions = <46 47>;
        };

        kp_WIN {
            bindings = <&kp LGUI>;
            key-positions = <13 22>;
        };
    };

    macros {
        // AMLを解除するマクロ

        /omit-if-no-ref/

        exit_AML: exit_AML {
            compatible = "zmk,behavior-macro";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <0>;
            bindings = <&tog_off 7>;
        };

        // KeyPress後にAMLを解除するマクロ

        /omit-if-no-ref/

        kp_exit_AML: kp_exit_AML {
            compatible = "zmk,behavior-macro-one-param";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <1>;
            bindings = <&macro_param_1to1 &kp MACRO_PLACEHOLDER &exit_AML>;
        };

        // GoogleChromeでページ翻訳を行うショートカット

        /omit-if-no-ref/

        sc_chrome_translate: sc_chrome_translate {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(F10) &kp T>;
            label = "SC_CHROME_TRANSLATE";
        };
    };

    behaviors {
        // レイヤーを無効化するbehavior

        /omit-if-no-ref/

        tog_off: toggle_layer_off {
            compatible = "zmk,behavior-toggle-layer";
            #binding-cells = <1>;
            display-name = "Toggle Layer Off";
            toggle-mode = "off";
        };

        // 左手用修飾キー

        /omit-if-no-ref/

        mt_mod_L: mt_mod_L {
            compatible = "zmk,behavior-hold-tap";
            label = "mt_mod_L";
            bindings = <&kp>, <&kp_exit_AML>;

            // Tap時にMOUSEレイヤーを離脱

            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <350>;
            quick-tap-ms = <175>;

            // require-prior-idle-ms = <150>;

            hold-trigger-key-positions = <KEYS_R THUMBS>; // 右手キーが押されたら即時Hold判定
            hold-trigger-on-release; // 上の設定を"右手キーが離されたら"に変更
            require-prior-idle-ms = <200>;
        };

        // 右手用修飾キー

        /omit-if-no-ref/

        mt_mod_R: mt_mod_R {
            compatible = "zmk,behavior-hold-tap";
            label = "mt_mod_R";
            bindings = <&kp>, <&kp_exit_AML>;

            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <350>;
            quick-tap-ms = <175>;

            // require-prior-idle-ms = <150>;

            hold-trigger-key-positions = <KEYS_L THUMBS>;
            hold-trigger-on-release;
            require-prior-idle-ms = <200>;
        };

        // SandS用設定

        /omit-if-no-ref/

        mt_SandS: mt_SandS {
            compatible = "zmk,behavior-hold-tap";
            label = "mt_SandS";
            bindings = <&kp_exit_AML>, <&kp_exit_AML>;

            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <250>;
        
        };

        // MOUSEレイヤー用修飾キー

        /omit-if-no-ref/

        mt_mod_MOUSE: mt_mod_MOUSE {
            compatible = "zmk,behavior-hold-tap";
            label = "mt_mod_MOUSE";
            bindings = <&kp>, <&kp_exit_AML>;

            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;

            // require-prior-idle-ms = <150>;
            // hold-trigger-key-positions = <KEYS_L_CSASP KEYS_R THUMBS>;

            hold-while-undecided; // KeyPress後 すぐにHold-behaviorが開始
        };

        // SCROLLレイヤー用 Layer/Tap

        /omit-if-no-ref/

        lt_SCROLL: lt_SCROLL {
            compatible = "zmk,behavior-hold-tap";
            label = "lt_SCROLL";
            bindings = <&mo>, <&kp_exit_AML>;

            #binding-cells = <2>;
            tapping-term-ms = <100>;
            flavor = "balanced";
            quick-tap-ms = <200>;
            hold-while-undecided; // KeyPress後 すぐにHold-behaviorが開始
        };

        // Shiftキーを無効にしてIME_ONにする

        /omit-if-no-ref/

        mm_IME_ON: mm_IME_ON {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LANGUAGE_1>, <&kp LANGUAGE_1>;

            mods = <(MOD_LSFT | MOD_RSFT)>;
            keep-mods = <0>; // 明示的にShiftキーを無効化
        };

        // <Shift + ,>で<!>を入力

        /omit-if-no-ref/

        mm_COMMA_EXCLAMATION: mm_COMMA_EXCLAMATION {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp EXCLAMATION>;

            mods = <(MOD_LSFT | MOD_RSFT)>;
        };

        // <Shift + .>で<?>を入力

        /omit-if-no-ref/

        mm_PERIOD_QUESTION: mm_PERIOD_QUESTION {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp PERIOD>, <&kp QUESTION>;

            mods = <(MOD_LSFT | MOD_RSFT)>;
        };

        // &kp の定義を上書き zmk-layout-shift/dts/layout_shift_kp_override.dtsi
        // Keep the original key_press behavior for ZMK core components

        original_key_press: original_key_press {
            compatible = "zmk,behavior-key-press";
            #binding-cells = <1>;
            label = "KEY_PRESS";
        };

        // Override the existing &kp behavior to use our custom implementation

        kp: key_press {
            compatible = "zmk,behavior-layout-shift-key-press";
            #binding-cells = <1>;
            label = "LAYOUT_SHIFT_KEY_PRESS";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        DEFAULT {
            bindings = <
&none  &none             &none              &none              &none             &none                                           &none        &none             &none                  &none                &none                 &none
&none  &kp Q             &kp W              &kp_exit_AML E     &kp R             &kp T                                           &kp Y        &kp U             &kp_exit_AML I         &kp O                &kp P                 &none
&none  &mt_mod_L LGUI A  &mt_mod_L LCTRL S  &mt_mod_L LSHFT D  &mt_mod_L LALT F  &kp G               &none             &none     &kp H        &kp J             &kp K                  &kp L                &mt_mod_R LGUI MINUS  &none
&none  &mt_mod_L LGUI Z  &mt_mod_L LCTRL X  &mt_mod_L LSHFT C  &mt_mod_L LALT V  &kp B               &kp TAB           &mo 1     &kp N        &mt_mod_R LALT M  &mt_mod_R LSHFT COMMA  &mt_mod_R LCTRL DOT  &mt_mod_R LGUI FSLH   &none
&none  &none             &kp LGUI           &kp LALT           &lt 1 LANG2       &SandS LSHFT SPACE  &lt 3 LANGUAGE_1  &kp BSPC  &lt 2 ENTER  &none             &none                  &kp LGUI             &none                 &none
            >;
        };

        SYMBOLS {
            bindings = <
&trans  &trans               &trans                 &trans                &trans               &trans                   &trans      &trans               &trans                &trans                 &trans                &trans
&trans  &trans               &kp DQT                &kp LPAR              &kp RPAR             &trans                   &kp AT      &kp EQUAL            &kp LT                &kp GT                 &kp PRCNT             &trans
&trans  &mt_mod_L LGUI AMPS  &mt_mod_L LCTRL SQT    &mt_mod_L LSHFT LBKT  &mt_mod_L LALT RBKT  &trans  &trans  &trans   &kp PIPE    &mt_mod_R LALT HASH  &mt_mod_R LSHFT SEMI  &mt_mod_R LCTRL COLON  &mt_mod_R LGUI UNDER  &trans
&trans  &kp LGUI             &mt_mod_L LCTRL GRAVE  &mt_mod_L LSHFT LBRC  &mt_mod_L LALT RBRC  &trans  &trans  &trans   &kp DOLLAR  &mt_mod_R LALT STAR  &mt_mod_R LSHFT EXCL  &mt_mod_R LCTRL QMARK  &mt_mod_R LGUI BSLH   &trans
&trans  &trans               &trans                 &trans                &trans               &trans  &trans  &kp DEL  &trans      &trans               &trans                &trans                 &trans                &trans
            >;
        };

        NUMPAD {
            bindings = <
&trans  &trans                &trans                 &trans                 &trans                &trans                     &trans    &trans           &trans     &trans       &trans         &trans
&trans  &trans                &kp KP_N7              &kp KP_N8              &kp KP_N9             &kp CARET                  &kp F5    &kp LS(LC(TAB))  &kp UP     &kp LC(TAB)  &kp F11        &trans
&trans  &mt_mod_L LGUI KP_N0  &mt_mod_L LCTRL KP_N4  &mt_mod_L LSHFT KP_N5  &mt_mod_L LALT KP_N6  &kp EQUAL  &trans  &trans  &kp HOME  &kp LEFT         &kp DOWN   &kp RIGHT    &kp END        &trans
&trans  &mt_mod_L LGUI KP_N0  &mt_mod_L LCTRL KP_N1  &mt_mod_L LSHFT KP_N2  &mt_mod_L LALT KP_N3  &kp TILDE  &trans  &trans  &trans    &kp KP_PLUS      &kp COMMA  &kp KP_DOT   &kp KP_DIVIDE  &trans
&trans  &trans                &trans                 &trans                 &trans                &trans     &trans  &trans  &trans    &trans           &trans     &trans       &trans         &trans
            >;
        };

        EXTRA {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                   &trans                &trans             &trans          &trans           &trans         &trans
&trans  &trans  &kp F7  &kp F8  &kp F9  &kp F12                  &kp LS(LC(N1))        &kp LS(LC(APOS))   &kp LC(N0)      &kp LS(LG(S))    &trans         &trans
&trans  &trans  &kp F4  &kp F5  &kp F6  &kp F11  &trans  &trans  &sc_chrome_translate  &kp C_VOLUME_DOWN  &mmv MOVE_UP    &kp C_VOLUME_UP  &kp LC(LG(T))  &trans
&trans  &trans  &kp F1  &kp F2  &kp F3  &kp F10  &trans  &trans  &trans                &mmv MOVE_LEFT     &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &trans         &trans
&trans  &trans  &trans  &trans  &trans  &trans   &trans  &mo 4   &trans                &trans             &trans          &trans           &trans         &trans
            >;
        };

        SYSTEM {
            bindings = <
&trans  &trans        &trans        &trans        &trans        &trans                        &trans  &trans        &trans  &trans  &trans      &trans
&trans  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4                  &trans  &out OUT_USB  &trans  &trans  &bt BT_CLR  &trans
&trans  &trans        &trans        &trans        &trans        &trans        &trans  &trans  &trans  &trans        &trans  &trans  &tog_ls     &trans
&trans  &trans        &trans        &trans        &trans        &out OUT_BLE  &trans  &trans  &trans  &trans        &trans  &trans  &trans      &trans
&trans  &trans        &trans        &trans        &trans        &trans        &trans  &trans  &trans  &trans        &trans  &trans  &trans      &trans
            >;
        };

        MOUSE {
            bindings = <
&trans  &trans  &trans                 &trans                 &trans                &trans                     &trans  &trans     &trans          &trans     &trans  &trans
&trans  &trans  &trans                 &lt_SCROLL 6 E         &trans                &trans                     &trans  &trans     &lt_SCROLL 6 I  &trans     &trans  &trans
&trans  &trans  &mt_mod_MOUSE LCTRL S  &mt_mod_MOUSE LSHFT D  &mt_mod_MOUSE LALT F  &tnras     &trans  &trans  &trans  &mkp LCLK  &mkp MCLK       &mkp RCLK  &trans  &trans
&trans  &trans  &mt_mod_MOUSE LCTRL X  &mt_mod_MOUSE LSHFT C  &mt_mod_MOUSE LALT V  &trans     &trans  &trans  &trans  &trans     &trans          &trans     &trans  &trans
&trans  &trans  &trans                 &trans                 &trans                &kp SPACE  &trans  &trans  &trans  &trans     &trans          &trans     &trans  &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };
    };
};
